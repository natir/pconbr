###############################################################################
# Manage input and output                                                     #
###############################################################################
inputs = {
    "s_pneumoniae": ["data/SRR8556426.fasta"],
    "c_vartiovaarae": ["data/ERR1877966.fasta", "data/ERR1877967.fasta", "data/ERR1877968.fasta", "data/ERR1877969.fasta", "data/ERR1877970.fasta"],
    "e_coli_ont": ["data/SRR8494940.fasta"],
    "e_coli_pb": ["data/SRR8494911.fasta"],
}

outputs = {
    "s_pneumoniae": "count/s_pneumoniae",
    "c_vartiovaarae": "count/c_vartiovaarae",
    "e_coli_ont": "count/e_coli_ont",
    "e_coli_pb": "count/e_coli_pb",
}

def generate_output(dataset, suffix):
    return outputs[dataset] + "." + suffix

def generate_all_output(suffix):
    return [generate_output(dataset, suffix) for dataset in outputs.keys()]

###############################################################################
# Section SSIK                                                                #
###############################################################################
rule ssik:
    input:
        lambda wildcards: inputs[wildcards.dataset_name]
    output:
        "count/{dataset_name}.ssik"
    benchmark:
        "benchmark/ssik/{dataset_name}.tsv"
    shell:
        "ssik count -i {input} -o {output} -k 17 -m 1"

rule all_ssik:
    input:
        generate_all_output("ssik"),
        
###############################################################################
# Section KMC                                                                 #
###############################################################################
rule kmc:
    input:
        lambda wildcards: inputs[wildcards.dataset_name]
    output:
        "count/{dataset_name}.kmc.kmc_suf",
    benchmark:
        "benchmark/kmc/{dataset_name}.tsv"
    shell:
        " && ".join([
            "mkdir -p kmc_workdir/{wildcards.dataset_name}",
            "mkdir -p kmc_file_input",
            "echo {input} > kmc_file_input/{wildcards.dataset_name}.lst",
            "sed -i 's/ /\\n/g' kmc_file_input/{wildcards.dataset_name}.lst",
            "kmc -k17 -t1 -fa @kmc_file_input/{wildcards.dataset_name}.lst count/{wildcards.dataset_name}.kmc kmc_workdir/{wildcards.dataset_name}",
            ])

rule all_kmc:
    input:
        generate_all_output("kmc.kmc_suf"),

###############################################################################
# Section JELLYFISH                                                           #
###############################################################################
rule jellyfish:
    input:
        lambda wildcards: inputs[wildcards.dataset_name]
    output:
        "count/{dataset_name}.jellyfish"
    benchmark:
        "benchmark/jellyfish/{dataset_name}.tsv"
    shell:
        "jellyfish count -m17 -t1 -s10G -C -o {output} {input}"
          
rule all_jellyfish:
    input:
        generate_all_output("jellyfish"),
        
rule all:
    input:
        rules.all_ssik.input,
        rules.all_kmc.input,
        rules.all_jellyfish.input,


