rule kmrf:
    input:
        "data/{dataset}/{type}.fasta"

    output:
        "filter/{dataset}/kmrf/{type}.k{kmer_size}.r{ratio}.fasta"

    benchmark:
        "filter/bench/kmrf/{dataset}_{type}.k{kmer_size}.r{ratio}.tsv"

    params:
        ratio = lambda wcd: int(wcd.ratio)/100,
            
    resources:
        mem_mb = lambda wcd: pcon_memory_usage(int(wcd.kmer_size)) + br_memory_usage(int(wcd.kmer_size))

    threads:
        32
        
    shell:
        "kmrf -i {input} -o {output} -k {wildcards.kmer_size} -t {threads} -r {params.ratio}"


rule filtlong:
    input:
        reads = "data/{dataset}/{type}.fasta",
        ref = "data/{dataset}/reference.fasta"

    output:
        "filter/{dataset}/filtlong/{type}{params}.q{quality}.fasta"

    benchmark:
        "filter/bench/kmrf/{dataset}_{type}{params}.q{quality}.tsv"
    
    threads:
        32

    conda:
        f"../{config['env_mode']}/filtlong.yaml"
        
    shell:
        "filtlong --min_mean_q {wildcards.quality} -a {input.ref} {input.reads} > {output}"

        
rule redbean:
    input:
        "filter/{dataset}/{filter}/{type}{params}.fasta"

    output:
        "filter/{dataset}/redbean/{filter}/{type}{params}/dbg.raw.fa"

    params:
        prefix = "filter{dataset}/redbean/{filter}/{type}{params}/dbg",
        genome_size = lambda wcd: config["genomeSize"][wcd.dataset] if wcd.dataset in config["genomeSize"] else config["genomeSize"]["bacteria"],
    threads:
        32

    conda:
        f"../{config['env_mode']}/redbean.yaml"
        
    shell:
        """
        wtdbg2 -x ont -g {params.genome_size} -i {input} -t {threads} -fo {params.prefix}
        wtpoa-cns -t {threads} -i {params.prefix}.ctg.lay.gz -fo {output}
        """

        
rule quast_filter:
    input:
        asm = "filter/{dataset}/redbean/{filter}/{type}{params}/dbg.raw.fa",
        ref = "data/{dataset}/reference.fasta"

    output:
        "filter/{dataset}/quast/{filter}/{type}{params}/report.txt"

    params:
        prefix = "filter/quast/{dataset}/{type}{params}/"
        
    threads:
        32

    conda:
        f"../{config['env_mode']}/quast.yaml"
        
    shell:
        "quast --min-identity 80 -t {threads} -o {params.prefix} -r {input.ref} {input.asm}"


rule evaluate_filter:
    input:
        reads = "filter/{dataset}/{filter}/{type}{params}.fasta",
        ref = "data/{dataset}/reference.fasta"
        
    output:
        "filter/{dataset}/identity/{filter}/{type}{params}.tsv"

    threads:
        32

    conda:
        f"../{config['env_mode']}/miniasm.yaml"
        
    shell:
        "minimap2 -x map10k -t {threads} -c {input.ref} {input.reads} | ./script/read_length_identity.py > {output}"


rule filter_bacteria:
    input:
        [f"filter/bacteria/quast/kmrf/reads.k{kmer_size}.r{ratio}/report.txt" for kmer_size in conf_range("kmer", step=2) for ratio in conf_range("ratio", 5)],
        [f"filter/bacteria/identity/kmrf/reads.k{kmer_size}.r{ratio}.tsv" for kmer_size in conf_range("kmer", step=2) for ratio in conf_range("ratio", 5)],

        [f"filter/bacteria/quast/filtlong/reads.q{quality}/report.txt" for quality in conf_range("filtlong_qual")],
        [f"filter/bacteria/identity/filtlong/reads.q{quality}.tsv" for quality in conf_range("filtlong_qual")],


rule filter_bacteria7:
    input:
        [f"filter/bacteria7/quast/kmrf/reads.k{kmer_size}.r{ratio}/report.txt" for kmer_size in conf_range("kmer", step=2) for ratio in conf_range("ratio", 5)],
        [f"filter/bacteria7/identity/kmrf/reads.k{kmer_size}.r{ratio}.tsv" for kmer_size in conf_range("kmer", step=2) for ratio in conf_range("ratio", 5)],

        [f"filter/bacteria7/quast/filtlong/reads.q{quality}/report.txt" for quality in conf_range("filtlong_qual")],
        [f"filter/bacteria7/identity/filtlong/reads.q{quality}.tsv" for quality in conf_range("filtlong_qual")],

        
rule filter_synthetic:
    input:
        [f"filter/synthetic.e{mean_id}.c{config['coverage']}/quast/kmrf/reads.k{kmer_size}.r{ratio}/report.txt" for mean_id in conf_range("identity") for kmer_size in conf_range("kmer", step=2) for ratio in conf_range("ratio", 5)],
        [f"filter/synthetic.e{mean_id}.c{config['coverage']}/identity/kmrf/reads.k{kmer_size}.r{ratio}.tsv" for mean_id in conf_range("identity") for kmer_size in conf_range("kmer", step=2) for ratio in conf_range("ratio", 5)],

         [f"filter/synthetic.e{mean_id}.c{config['coverage']}/quast/filtlong/reads.q{quality}/report.txt" for mean_id in conf_range("identity") for quality in conf_range("filtlong_qual")],
        [f"filter/synthetic.e{mean_id}.c{config['coverage']}/identity/filtlong/reads.q{quality}.tsv" for mean_id in conf_range("identity") for quality in conf_range("filtlong_qual")],

        
rule filter_yeast:
    input:
        # real
        [f"filter/yeast/quast/kmrf/reads.k{kmer_size}.r{ratio}/report.txt" for kmer_size in conf_range("kmer", step=2) for ratio in conf_range("ratio", 5)],
        [f"filter/yeast/identity/kmrf/reads.k{kmer_size}.r{ratio}.tsv" for kmer_size in conf_range("kmer", step=2) for ratio in conf_range("ratio", 5)],

        [f"filter/yeast/quast/filtlong/reads.q{quality}/report.txt" for quality in conf_range("filtlong_qual")],
        [f"filter/yeast/identity/filtlong/reads.q{quality}.tsv" for quality in conf_range("filtlong_qual")],

        
rule filter_metagenome:
    input:
        # real
        [f"filter/metagenome/quast/kmrf/reads.k{kmer_size}.r{ratio}/report.txt" for kmer_size in conf_range("kmer", step=2) for ratio in conf_range("ratio", 5)],
        [f"filter/metagenome/identity/kmrf/reads.k{kmer_size}.r{ratio}.tsv" for kmer_size in conf_range("kmer", step=2) for ratio in conf_range("ratio", 5)],

        [f"filter/metagenome/quast/filtlong/reads.q{quality}/report.txt" for quality in conf_range("filtlong_qual")],
        [f"filter/metagenome/identity/filtlong/reads.q{quality}.tsv" for quality in conf_range("filtlong_qual")],

        
rule filter_all:
    input:
        rules.filter_bacteria.input,
        rules.filter_bacteria7.input,
        rules.filter_synthetic.input,
        rules.filter_yeast.input,
        rules.filter_metagenome.input,
