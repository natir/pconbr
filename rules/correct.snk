
rule br:
    input:
        "data/{dataset}/{prefix}.fasta"

    output:
        "correct/{dataset}/br/{prefix}.k{kmer_size}.fasta"

    benchmark:
        "correct/bench/br/{dataset}_{prefix}.k{kmer_size}.tsv"
        
    resources:
        mem_mb = lambda wcd: pcon_memory_usage(int(wcd.kmer_size)) + br_memory_usage(int(wcd.kmer_size))

    threads:
        32
        
    shell:
        "br -i {input} -o {output} -k {wildcards.kmer_size} -t {threads} -m one greedy gap_size graph"


rule canu:
    input:
        "data/{dataset}/{type}.fasta"

    output:
        "correct/{dataset}/canu/{type}{prefix}.fasta"

    benchmark:
        "correct/bench/canu/{dataset}_{type}{prefix}.tsv"
        
    params:
        prefix = lambda wcd: f"{wcd.type}{wcd.prefix}",
        work_dir = lambda wcd: "tmp/canu/{wcd.dataset}_{wcd.prefix}/",
        genome_size = lambda wcd: config["genomeSize"][wcd.dataset],
        canu_correct_out = lambda wcd: "tmp/canu/{wcd.dataset}_{wcd.prefix}/corrected.fasta",

    conda:
        f"../{config['env_mode']}/canu.yaml"

    threads:
        32
        
    shell:
        "canu -threads -nanopore {input} -p {params.prefix} -d {params.work_dir} useGrid=false executiveThreads={threads} genomeSize={params.genome_size} && mv {params.canu_correct_out} {output}"

        
rule elector:
    input:
        raw = "data/{dataset}/{type}.fasta",
        correct = "correct/{dataset}/{corrector}/{type}{params}.fasta",
        reference = "data/{dataset}/reference.fasta",

    output:
        "correct/{dataset}/elector/{corrector}/{type}{params}/log"

    params:
        output = "correct/{dataset}/elector/{corrector}/{type}{params}"
        
    conda:
        f"../{config['env_mode']}/elector.yaml"

    threads:
        32
        
    shell:
        "elector -reference {input.reference} -uncorrected {input.raw} -corrected {input.correct} -threads {threads} -corrector {wildcards.corrector} -simulator real -output {params.output}"

        
rule correct_bacteria:
    input:
        # synthetic
        [f"correct/bacteria/elector/{corrector}/synthetic.e{mean_id}.c{config['coverage']}.k{kmer_size}/log" for mean_id in conf_range("identity") for kmer_size in conf_range("kmer", step=2) for corrector in ["br", "canu"]],

        # real
        [f"correct/bacteria/elector/{corrector}/reads.k{kmer_size}/log" for kmer_size in conf_range("kmer", step=2) for corrector in ["br", "canu"]],

        
rule correct_yeast:
    input:
        # real
        [f"correct/yeast/elector/{corrector}/reads.k{kmer_size}/log" for kmer_size in conf_range("kmer", step=2) for corrector in ["br", "canu"]],
        

rule correct_metagenome:
    input:
        # real
        [f"correct/metagenome/elector/{corrector}/reads.k{kmer_size}/log" for kmer_size in conf_range("kmer", step=2) for corrector in ["br", "canu"]],
        

rule correct_all:
    input:
        rules.correct_bacteria.input,
        rules.correct_yeast.input,
        rules.correct_metagenome.input,
    

