
rule br:
    input:
        "data/{dataset}/{prefix}.fasta"

    output:
        "correct/{dataset}/br/{prefix}.k{kmer_size}.fasta"

    log:
        "log/correct/br/{dataset}_{prefix}.k{kmer_size}.txt"
        
    benchmark:
        "correct/bench/br/{dataset}_{prefix}.k{kmer_size}.tsv"
        
    resources:
        mem_mb = lambda wcd: pcon_memory_usage(int(wcd.kmer_size)) + br_memory_usage(int(wcd.kmer_size))

    threads:
        config['max_threads']
        
    shell:
        "br -i {input} -o {output} -k {wildcards.kmer_size} -t {threads} -m one greedy gap_size graph -vvv 2>&1 > {log}"


rule canu:
    input:
        "data/{dataset}/{type}.fasta"

    output:
        "correct/{dataset}/canu/{type}{params}.fasta"

    log:
        "log/correct/canu/{dataset}_{type}{params}.txt"

    benchmark:
        "correct/bench/canu/{dataset}_{type}{params}.tsv"
        
    params:
        prefix = lambda wcd: f"{wcd.type}{wcd.params}",
        work_dir = lambda wcd: f"tmp/canu/{wcd.dataset}_{wcd.params}/",
        genome_size = lambda wcd: config["genomeSize"][wcd.dataset] if wcd.dataset in config["genomeSize"] else config["genomeSize"]["bacteria"],
        canu_correct_out = lambda wcd: f"tmp/canu/{wcd.dataset}_{wcd.params}/{wcd.type}{wcd.params}.correctedReads.fasta.gz",

    conda:
        f"../{config['env_mode']}/canu.yaml"

    threads:
        config['max_threads']
        
    shell:
        """
        canu -nanopore {input} -p {params.prefix} -d {params.work_dir} -correct useGrid=false executiveThreads={threads} genomeSize={params.genome_size} 2>&1 > {log}
        seqtk seq -A {params.canu_correct_out} > {output} 2>> {log}
        """

        
rule consent:
    input:
        "data/{dataset}/{type}.fasta"

    output:
        "correct/{dataset}/consent/{type}{params}.fasta"

    log:
        "log/correct/consent/{dataset}_{type}{params}.txt"

    benchmark:
        "correct/bench/consent/{dataset}_{type}{params}.tsv"
    
    conda:
        f"../{config['env_mode']}/consent.yaml"

    threads:
        config['max_threads']
        
    shell:
        "CONSENT-correct --in {input} --out {output} --type ONT 2>&1 > {log}"


rule necat:
    input:
        "data/{dataset}/{type}.fasta"

    output:
        "correct/{dataset}/necat/{type}{params}.fasta"

    log:
        "log/correct/necat/{dataset}_{type}{params}.txt"

    benchmark:
        "correct/bench/necat/{dataset}_{type}{params}.tsv"
        
    params:
        template_path = "etc/necat_template",
        work_dir = lambda wcd: f"tmp/necat/{wcd.dataset}_{wcd.type}{wcd.params}/",
        coverage = "100000",
        input_abs_path = lambda wcd: os.path.abspath(f"data/{wcd.dataset}/{wcd.type}.fasta"),
        genome_size = lambda wcd: config["genomeSize"][wcd.dataset] if wcd.dataset in config["genomeSize"] else config["genomeSize"]["bacteria"],
        
    conda:
        f"../{config['env_mode']}/necat.yaml"

    threads:
        config['max_threads']
        
    shell:
        """
        mkdir -p {params.work_dir} 2>&1 > {log}
        echo '{params.input_abs_path}' > {params.work_dir}/file_list.txt 2> {log}
        cp {params.template_path} {params.work_dir}/config 2>&1 > {log}
        sed -i 's#_WORKDIR_#{params.work_dir}#' {params.work_dir}/config 2>&1 > {log}
        sed -i 's#_READ_LIST_#{params.work_dir}/file_list.txt#' {params.work_dir}/config 2>&1 > {log}
        sed -i 's#_GENOME_SIZE_#{params.genome_size}#' {params.work_dir}/config 2>&1 > {log}
        sed -i 's#_THREADS_#{threads}#' {params.work_dir}/config 2>&1 > {log}
        sed -i 's#_COVERAGE_#{params.coverage}#' {params.work_dir}/config 2>&1 > {log}
        necat correct {params.work_dir}/config 2>&1 > {log}
        gzip -c -d {params.work_dir}/1-consensus/cns_iter2/cns.fasta.gz > {output}  2> {log}
        """
        
rule elector:
    input:
        raw = "data/{dataset}/{type}.fasta",
        correct = "correct/{dataset}/{corrector}/{type}{params}.fasta",
        reference = "data/{dataset}/reference.fasta",

    output:
        "correct/{dataset}/elector/{corrector}/{type}{params}/log"

    log:
        "log/correct/elector/{dataset}_{corrector}_{type}{params}.txt"
        
    params:
        output = "correct/{dataset}/elector/{corrector}/{type}{params}"
        
    conda:
        f"../{config['env_mode']}/elector.yaml"

    threads:
        config['max_threads']
        
    shell:
        "elector -reference {input.reference} -uncorrected {input.raw} -corrected {input.correct} -threads {threads} -corrector {wildcards.corrector} -simulator real -output {params.output} 2>&1 > {log}"


rule correct_error_rate:
    input:
        reads = "correct/{dataset}/{corrector}/{type}{params}.fasta",
        ref = "data/{dataset}/reference.fasta"

    output:
        "correct/{dataset}/{corrector}/{type}{params}.stats",
        
    log:
        "log/correct/error_rate/{dataset}_{corrector}_{type}{params}.txt"

    threads:
        config['max_threads']

    conda:
        f"../{config['env_mode']}/minimap.yaml"
        
    shell:
        "minimap2 -x map10k -t {threads} -a {input.ref} {input.reads} 2> {log} | samtools stats 2> {log} | grep '^SN' > {output} 2> {log}"

        
rule correct_length_identity:
    input:
        reads = "correct/{dataset}/{corrector}/{type}{params}.fasta",
        ref = "data/{dataset}/reference.fasta"
        
    output:
        "correct/{dataset}/{corrector}/{type}{params}.len_id.tsv",

    log:
        "log/correct/len_id/{dataset}_{corrector}_{type}{params}.txt"

    threads:
        config['max_threads']

    conda:
        f"../{config['env_mode']}/minimap.yaml"
        
    shell:
        "minimap2 -x map10k -t {threads} -c {input.ref} {input.reads} 2> {log} | ./script/read_length_identity.py > {output} 2>> {log}"        


rule correct_all:
    input:
        count_files("bacteria"),
        count_files("bacteria5"),
        count_files("bacteria7"),
        count_files("yeast"),
        count_files("metagenome"),
        (count_files(f"synthetic.e{mean_id}.c{config['coverage']}") for mean_id in conf_range("identity")),
        (count_files(f"celegans.e{config['celegans_identity']}.c{coverage}") for coverage in conf_range("celegans_coverage")),
    

