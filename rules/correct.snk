
rule br:
    input:
        "data/{dataset}/{prefix}.fasta"

    output:
        "correct/{dataset}/br/{prefix}.k{kmer_size}.fasta"

    benchmark:
        "correct/bench/br/{dataset}_{prefix}.k{kmer_size}.tsv"
        
    resources:
        mem_mb = lambda wcd: pcon_memory_usage(int(wcd.kmer_size)) + br_memory_usage(int(wcd.kmer_size))

    threads:
        32
        
    shell:
        "br -i {input} -o {output} -k {wildcards.kmer_size} -t {threads} -m one greedy gap_size graph"


rule canu:
    input:
        "data/{dataset}/{type}.fasta"

    output:
        "correct/{dataset}/canu/{type}{params}.fasta"

    benchmark:
        "correct/bench/canu/{dataset}_{type}{params}.tsv"
        
    params:
        prefix = lambda wcd: f"{wcd.type}{wcd.params}",
        work_dir = lambda wcd: "tmp/canu/{wcd.dataset}_{wcd.params}/",
        genome_size = lambda wcd: config["genomeSize"][wcd.dataset],
        canu_correct_out = lambda wcd: "tmp/canu/{wcd.dataset}_{wcd.params}/corrected.fasta",

    conda:
        f"../{config['env_mode']}/canu.yaml"

    threads:
        32
        
    shell:
        "canu -threads -nanopore {input} -p {params.prefix} -d {params.work_dir} useGrid=false executiveThreads={threads} genomeSize={params.genome_size} && mv {params.canu_correct_out} {output}"

        
rule consent:
    input:
        "data/{dataset}/{type}.fasta"

    output:
        "correct/{dataset}/consent/{type}{params}.fasta"

    benchmark:
        "correct/bench/consent/{dataset}_{type}{params}.tsv"
    
    conda:
        f"../{config['env_mode']}/consent.yaml"

    threads:
        32
        
    shell:
        "CONSENT-correct --in {input} --out {output} --type ONT"


rule necat:
    input:
        "data/{dataset}/{type}.fasta"

    output:
        "correct/{dataset}/necat/{type}{params}.fasta"

    benchmark:
        "correct/bench/necat/{dataset}_{type}{params}.tsv"
        
    params:
        template_path = "etc/necat_template",
        work_dir = lambda wcd: f"tmp/necat/{wcd.dataset}_{wcd.type}{wcd.params}/",
        coverage = "100000",
        input_abs_path = lambda wcd: os.path.abspath(f"data/{wcd.dataset}/{wcd.type}.fasta"),
        genome_size = lambda wcd: config["genomeSize"][wcd.dataset],        
        
    conda:
        f"../{config['env_mode']}/necat.yaml"

    threads:
        32
        
    shell:
        "mkdir -p {params.work_dir} &&"
        " echo '{params.input_abs_path}' > {params.work_dir}/file_list.txt &&"
        " cp {params.template_path} {params.work_dir}/config &&"
        " sed -i 's#_WORKDIR_#{params.work_dir}#' {params.work_dir}/config &&"
        " sed -i 's#_READ_LIST_#{params.work_dir}/file_list.txt#' {params.work_dir}/config &&"
        " sed -i 's#_GENOME_SIZE_#{params.genome_size}#' {params.work_dir}/config &&"
        " sed -i 's#_THREADS_#{threads}#' {params.work_dir}/config &&"
        " sed -i 's#_COVERAGE_#{params.coverage}#' {params.work_dir}/config &&"
        " necat correct {params.work_dir}/config &&"
        "cp {params.work_dir}/1-consensus/cns_iter2/cns.fasta {output}"

        
rule elector:
    input:
        raw = "data/{dataset}/{type}.fasta",
        correct = "correct/{dataset}/{corrector}/{type}{params}.fasta",
        reference = "data/{dataset}/reference.fasta",

    output:
        "correct/{dataset}/elector/{corrector}/{type}{params}/log"

    params:
        output = "correct/{dataset}/elector/{corrector}/{type}{params}"
        
    conda:
        f"../{config['env_mode']}/elector.yaml"

    threads:
        32
        
    shell:
        "elector -reference {input.reference} -uncorrected {input.raw} -corrected {input.correct} -threads {threads} -corrector {wildcards.corrector} -simulator real -output {params.output}"

        
rule correct_bacteria:
    input:
        # synthetic
        [f"correct/bacteria/elector/br/synthetic.e{mean_id}.c{config['coverage']}.k{kmer_size}/log" for mean_id in conf_range("identity") for kmer_size in conf_range("kmer", step=2)],
        [f"correct/bacteria/elector/{corrector}/synthetic.e{mean_id}.c{config['coverage']}/log" for mean_id in conf_range("identity") for corrector in ["canu", "consent", "necat"]],

        # real
        [f"correct/bacteria/elector/br/reads.k{kmer_size}/log" for kmer_size in conf_range("kmer", step=2)],
        [f"correct/bacteria/elector/{corrector}/reads/log" for corrector in ["canu", "consent", "necat"]],

        
rule correct_yeast:
    input:
        # real
        [f"correct/yeast/elector/br/reads.k{kmer_size}/log" for kmer_size in conf_range("kmer", step=2)],
        [f"correct/yeast/elector/{corrector}/reads/log" for corrector in ["canu", "consent", "necat"]],

    
rule correct_metagenome:
    input:
        # real
        [f"correct/metagenome/elector/br/reads.k{kmer_size}/log" for kmer_size in conf_range("kmer", step=2)],
        [f"correct/metagenome/elector/{corrector}/reads/log" for corrector in ["canu", "consent", "necat"]],
       

rule correct_all:
    input:
        rules.correct_bacteria.input,
        rules.correct_yeast.input,
        rules.correct_metagenome.input,
    

