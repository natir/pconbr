import os

##############################
# Generate range from config #
##############################
def conf_range(name):
    local = config[name]

    if "list" in local:
        return local["list"]
    
    step = local["step"] if "step" in local else 1
    
    return range(local["begin"], local["end"], step)

######################################
# Compute estimation of memory usage #
######################################
import math

def pcon_memory_usage(kmer_size):
    if kmer_size >= 11:
        return 2048 + math.ceil(
            1.2 *
            (
                1 << (kmer_size * 2 - 21)
            )
        )
    else:
        return 2048


def br_memory_usage(kmer_size):
    if kmer_size >= 13:
        return 2048 + math.ceil(
            1.2 *
            (
                1 << (kmer_size * 2 - 24)
            )
        )
    else:
        return 2048

#######################
# Get the genome size #
#######################
def genome_size(wcd):
    if wcd.dataset in config["genomeSize"]:
        return config["genomeSize"][wcd.dataset]
    elif wcd.dataset.startswith("synthetic"):
        return config["genomeSize"]["bacteria"]
    elif wcd.dataset.startswith("celegans"):
        return config["genomeSize"]["celegans"]
    else:
        return config["genomeSize"]["bacteria"]

def count_files(dataset):
    for kmer_size in conf_range("kmer"):
        yield f"count/{dataset}/pcon/reads.k{kmer_size}.pcon"
        yield f"count/{dataset}/pcon_cd/reads.k{kmer_size}.pcon"
        yield f"count/{dataset}/kmc/reads.k{kmer_size}.kmc_suf"
        yield f"count/{dataset}/kmc_cd/reads.k{kmer_size}.csv"
        yield f"count/{dataset}/kmc_disk/reads.k{kmer_size}.kmc_suf"
        yield f"count/{dataset}/kmc_disk_cd/reads.k{kmer_size}.csv"
        yield f"count/{dataset}/jellyfish/reads.k{kmer_size}.jf"
        yield f"count/{dataset}/jellyfish_cd/reads.k{kmer_size}.csv"

    
def correct_files(dataset):
    for kmer_size in conf_range("kmer"):
        yield f"correct/{dataset}/elector/br/reads.k{kmer_size}/log"
        yield f"correct/{dataset}/br/reads.k{kmer_size}.stats"
        yield f"correct/{dataset}/br/reads.k{kmer_size}.len_id.tsv"

    for corrector in config['corrector']:
        if corrector != "necat":
            yield f"correct/{dataset}/elector/{corrector}/reads/log"
        yield f"correct/{dataset}/{corrector}/reads.stats"
        yield f"correct/{dataset}/{corrector}/reads.len_id.tsv"

        
def filter_files(dataset):    
        yield f"filter/{dataset}/quast/raw/reads/report.txt"

        for kmer_size in conf_range("kmer"):
            for ratio in conf_range("ratio"):
                yield f"filter/{dataset}/kmrf/reads.k{kmer_size}.r{ratio}.stats"
                yield f"filter/{dataset}/identity/kmrf/reads.k{kmer_size}.r{ratio}.tsv"
                yield f"filter/{dataset}/quast/kmrf/reads.k{kmer_size}.r{ratio}/report.txt"
                
        for quality in conf_range("filtlong_qual"):
            yield f"filter/{dataset}/filtlong/reads.q{quality}.stats"
            yield f"filter/{dataset}/identity/filtlong/reads.q{quality}.tsv"
            yield f"filter/{dataset}/quast/filtlong/reads.q{quality}/report.txt"

            
def polish_files(dataset):
    yield f"polish/{dataset}/quast/polish/report.txt"
    
    for kmer_size in conf_range("kmer"):
        for abundance in conf_range("abundance"):
            yield f"polish/{dataset}/quast/polish.k{kmer_size}.a{abundance}/report.txt"


def get_dataset():
    for d in ["bacteria", "bacteria5", "bacteria7", "metagenome", "yeast"]:
        if d not in config["skip_dataset"]:
            yield d

    if "synthetic" not in config["skip_dataset"]:
        for mean_id in conf_range("identity"):
            yield f"synthetic.e{mean_id}.c{config['coverage']}"

    if "celegans" not in config["skip_dataset"]:
        for coverage in conf_range("celegans_coverage"):
            yield f"celegans.e{config['celegans_identity']}.c{coverage}"
